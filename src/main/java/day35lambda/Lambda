/*
     1)Lambda "Functional programming" dir, digeri "Structured Programming"
     2)"Functional programming" "Ne yapmak gerekir?(What to do?)" ile ilgilenir "Nasil yapmak gerekir?(How to do?)" ile ilgilenmez.
     3)"Functional programming" Collection'lar ve Array'lerde kullanilir.
     4)Lambda, Java'ya "Java 8"de eklendi.

     "stream()" elemanlari yukardan asagiya dizer."Lambda" list'i "stream" e cevirir Ã¶yle calisir.
     "filter()" filtrelemek icin kullanilir.
     "map()" u var olan elemani degistirmek icin kullanilir.
     "distinct()" u tekrarli elemanlari sadece bir kere gosterir ve tekrarsizlari olduklari kadar gosterir.
     Note : Distinct methodu ilk baslara konulursa "Lambda" ya daha az is yaptirmis oluruz.
     "reduce()" u  kullanildiginda cok sayidaki deger bir tane degere donusmus olur.
     Orn; reduce(0,(t,u)->t+u) ==> "t" ilk degeri "sifir" dan alir, daha sonraki degerleri toplamanin sonucundan alir.
     "u" ise degerlerini her zaman "stream" den alir
     get()==> methodu optional data type'ini Integer'a cevirir.
      sorted() methodu ==> elemanlari kucukten buyuge siralar.
     sorted(Comparator.reverseOrder())methodu ==> elemanlari buyukten kucuge siralar.
 */
 /*
   1)Lambda "functional programing"dir.
   2)"Functional programming" ne yapmak gerekirle(what to do) ilgilenir.Nasil yapmak gerekirle(how to do) ilgilenmez.
   3)"Functional programming" Collection`lar ve Array`lerde kullanilir.
   4)Lambda javaya "Java 8"de eklendi.
   5)"Functional programming" daha hizli ve hatasiz calisir.
   6)Stream listi yukaridan asagiya siralar.
    */